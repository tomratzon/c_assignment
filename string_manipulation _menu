#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX_LEN 30


void printMenu();
int checkChars(char* str);
int maxWordLength(char* str);
int countWords(char* str);
void inputSent(char* str_in, int k, char str_out[], int n);
void printSent(char* str, int n);
void rolSent(char* str, int m);
void rorSent(char* str, int m);
void revSent(char* str);
void subSent(char* str, int k);
int manuChoice(char* str);
char* removeSpaces(char* str);
void senCopy(char* pstr,char*copy);
char* spiltChoice(char* pstr);//extract the first 2 elements of str
char* splitChoiceFir(char* psection);//extract the first element of str
char* splitChoiceSec(char* psection);//extract the second element of str
char* sortSenA(char* psen);//sort the word in ascending order
char* sortSenD(char* psen); //sort the word in descending order
int searchWord(char* psen, char* word);//return the number of the word in the sentence. if not exist return 0;


int searchWord(char* psen, char* word)//return the number of the word in the sentence. if not exist return 0;
{
	int i = 0; int j = 0; int counter = 0;
	while (psen[i-1]!='\0')
	{
		if (psen[i] == ' '||psen[i]=='\0')
		{
			counter++;//counts number of word
			if (j != 0&&j==strlen(word))
				return counter; //when get to the next space and all chars are the dame return number of words
		}
		else
		{
			if (psen[i] == word[j])//compare the chars 
			{
				j++;
			}
			else
			{
				j = 0;
			}
		}
		i++;
	}
	return 0;
}
char* sortSenA(char* psen)
{
	char* temp;
	int maxlen = maxWordLength(psen);
	int i = 0, j = 0, wordNum = 0;
	char** words = (char**)calloc(countWords(psen)+1 , sizeof(char*));
	char* word = calloc(maxlen+1, sizeof(char));
	while (psen[i-1]!='\0')//extract every word as a pointer into a pointer array
	{
		if (psen[i] == ' '|| psen[i] == '\0')
		{
			words[wordNum] = word;
			wordNum++;
			j = -1;
			word = calloc(maxlen+1, sizeof(char));

		}
		else
		{
			word[j] = psen[i];
		}
		
		j++;
		i++;
	}
	int word_num = countWords(psen);
	for (i = 0; i < word_num; i++) //sort the word in the valid order
	{
		for (j = 0; j < word_num; j++)
		{
			if (strcmp(words[i], words[j])<0)
			{
				temp = words[i];
				words[i] = words[j];
				words[j] = temp;
			}
		}
	}
	int k = 0; j = 0;
	
	for (i = 0; i < word_num; i++)// insert the new order into the original sentence
	{
		while (words[i][k]!='\0')
		{
			psen[j] = words[i][k];
			k++; j++;
		}
		k = 0;
		if (i == word_num-1)
		{
			break;
		}
		psen[j] = ' ';
		j++;
	}
	free(word);
	free(words);
}


char* sortSenD(char* psen)
{
		char* temp;
		int maxlen = maxWordLength(psen);
		int i = 0, j = 0, wordNum = 0;
		char** words = (char**)calloc(countWords(psen) + 1, sizeof(char*));
		char* word = calloc(maxlen + 1, sizeof(char));
		while (psen[i - 1] != '\0')//extract every word as a pointer into a pointer array
		{
			if (psen[i] == ' ' || psen[i] == '\0')
			{
				words[wordNum] = word;
				wordNum++;
				j = -1;
				word = calloc(maxlen + 1, sizeof(char));

			}
			else
			{
				word[j] = psen[i];
			}

			j++;
			i++;
		}
		int word_num = countWords(psen);
		for (i = 0; i < word_num; i++)//sort the word in the valid order
		{
			for (j = 0; j < word_num; j++)
			{
				if (strcmp(words[i], words[j]) > 0)
				{
					temp = words[i];
					words[i] = words[j];
					words[j] = temp;
				}
			}
		}
		int k = 0; j = 0;
		for (i = 0; i < word_num; i++)// insert the new order into the original sentence
		{
			while (words[i][k] != '\0')
			{
				psen[j] = words[i][k];
				k++; j++;
			}
			k = 0;
			if (i == word_num - 1)
			{
				break;
			}
			psen[j] = ' ';
			j++;
		}
		free(word);
		free(words);
}

char* splitChoiceFir(char* psection)//extract the first elements of choice
{
	if (psection == NULL) //checks if the choice is empty
	{
		return NULL;
	}
	char* psection1 = calloc(100, sizeof(char));
	int i = 0;
	
	while (psection[i] != ' '&&psection[i]!='\0') // if the input from the user starts with spaces, which is alowed but not need
	{
		psection1[i] = psection[i];
		i++;
	}
	return psection1;
}


char* splitChoiceSec(char* psection)//extract the second elements of choice
{
	char* psection2 = calloc(100, sizeof(char));
	int i = 0;int j =0 ;
	if(psection == NULL) //checks if the choice is empty
	{
		return NULL;
	}
	while (psection[i] != ' ' && psection[i] != '\0')// run to the end of word 1
	{
		i++;
	}
	if (psection[i] == '\0')
	{
		free(psection2);
		return NULL;
	}
	i++;
	while (psection[i] !='\0') //copy word 2
	{
		psection2[j] = psection[i];
		i++; j++;
	}
	return psection2;

}
char* spiltChoice(char* pstr)//extract the first 2 elements of choice
{
	char* psection1 = calloc(100, sizeof(char));
	int i = 0;
	if (pstr[i] == '\0') //checks if the choice is empty
	{
		free(psection1);
		return NULL;
	}
	while (pstr[i] == ' ') // if the input from the user starts with spaces, which is alowed but not need
	{
		i++;
	}

	while (pstr[i] != '\0')
	{
		if (pstr[i] != ' ')
		{
			psection1[i] = pstr[i];
		}
		else
			break;
		i++;
	}
	if (pstr[i] == '\0')//if only 1 word in choice end the func
	{
		return psection1;
	}
	else
	{
		psection1[i] = ' ';
		i++;
	}
	while (pstr[i] != '\0')// add the second word 
	{
		if (pstr[i] != ' ')
		{
			psection1[i] = pstr[i];
		}
		else
			break;
		i++;
	}
	
	return psection1;//return first 2 word in str as a pointer
}


int maxWordLength(char* pstr)//return the length of the longest word
{
	int i = 0, max_len = 0, counter = 0;
	while (pstr[i] >= 'A' && pstr[i] <= 'Z'|| pstr[i]==' ')
	{
		while (pstr[i]>='A'&& pstr[i] <= 'Z')
		{
			counter++;
			i++;
		}
		if (counter>max_len)
		{
			max_len = counter;
			counter = 0;
		}
		i++;
	}
	return max_len;

}

void subSent(char* pstr, int k)//prints all the sun strings with length k of the main sentence
{

	char* psenCpy1 = calloc(strlen(pstr) + 1, sizeof(char));
	char* sub_strings = calloc((strlen(pstr) * k + 1) + 1, sizeof(char));//size of the max possible substrings whith spaces
	if (psenCpy1 == NULL || sub_strings == NULL)//checks the sucsses of the calloc function
	{
		printf("Memory allocation failed\n");
		exit;
	}
	int j = 0, i = 0, l = 0, counter = 0;
	while (pstr[i] != '\0')//creates a copy of the sentece without spaces
	{
		psenCpy1[j] = pstr[i];
		i++; j++;
	}
	i = 0, j = 0;
	
	while (psenCpy1[counter + k ] != '\0')//copy all possible sub strings to sub_strings array with spaces
	{
		if (psenCpy1[i] != ' ')
		{
			sub_strings[j] = psenCpy1[i];
			l++;//counting the number of chars in sub string
		}
		else
		{
			j--;//adjust j back to former index
			counter++;
		}
		if (l == k)
		{
			j++;
			sub_strings[j] = ' ';//space after every sub string
			
			l = 0;//new sub string
			i = counter;//move the i to the new start of index
			counter++;//index of the start of the sub string=num of sub strings
		}
		i++;
		j++;
	}
	sub_strings[j] = '\0';
	l = 0, i = 0, j = 0;
	char* sub = calloc(k+1,sizeof(char));
	char* subcopy = calloc(strlen(sub_strings) + 1, sizeof(char));

	if (sub == NULL)//checks the sucsses of the calloc function
	{
		printf("Memory allocation failed\n");
		exit;
	}
	while (sub_strings[i]!='\0')
	{

		while (sub_strings[i]!=' '&& sub_strings[i]!='\0')
		{
			sub[j] = sub_strings[i];
			i++; j++;
			

		}
		if (!searchWord(subcopy, sub))
		{
			printSent(sub, 0);
			printf("\n");
		}
		j = 0;
		while (sub[j] != '\0')
		{
			subcopy[l] = sub[j];
			j++, l++;
		}
		subcopy[l] = ' ';
		i++, l++;
		j = 0;
	}
	free(psenCpy1), free(sub_strings), free(sub), free(subcopy);
	
}
			
			

void senCopy(char* pstr, char* psenCpy)//copy the sen to a new adress to work with
{
	int k = 0;
	for (k; k < strlen(pstr); k++)//creates a copy of the array
	{
		psenCpy[k] = pstr[k];
	}
}

void rorSent(char* pstr, int m)//functin rotate the sentence m words to the right if possible, else prints error;
{
	int numOfWords = countWords(pstr);
	int num = numOfWords - m;
	if (numOfWords < m)//checks if rotation is possible
	{
		printf("ERROR: Incorrect command, try again.\n");
	}
	if ((numOfWords != m) && (numOfWords != 0))//checks if the rotation is diffrent from the original
	{
		int i = 0, wCount = 0, k = 0;
		char* psenCpy = calloc(strlen(pstr) + 1, sizeof(char));
		char* pRotation = calloc(strlen(pstr) + 1, sizeof(char));
		if (psenCpy == NULL || pRotation == NULL)//checks the sucsses of the calloc function
		{
			printf("Memory allocation failed\n");
			exit;
		}
		senCopy(pstr, psenCpy);//copy the original sentence
		while (wCount != num)// copy the first m words to pRotation 
		{
			if (psenCpy[i] == ' ')
			{
				wCount++;
			}
			pRotation[k] = psenCpy[i];
			i++;
			k++;
		}
		pRotation[i - 1] = '\0';//remove the extra space

		k = 0;
		while (psenCpy[i] != '\0')//copy the rest of the sentence as the strat of the original
		{
			pstr[k] = psenCpy[i];
			i++;
			k++;
		}
		i = 0;
		pstr[k] = ' ';//add the space been the rest of the sentence and the part of the rotation
		k++;
		while (pRotation[i] != '\0')// cipt the rotation after the space at the end of the sentece
		{
			pstr[k] = pRotation[i];
			i++;
			k++;
		}
		free(pRotation);//free the unneeded memory
		free(psenCpy);//free the unneeded memory
	}
}



void rolSent(char* pstr, int m)//functin rotate the sentence m words to the left if possible, else prints error;
{
	int numOfWords = countWords(pstr);
	if (numOfWords < m)//checks if rotation is possible
	{
		printf("ERROR: Incorrect command, try again.\n");
	}
	if ((numOfWords != m) && (numOfWords != 0))//checks if the rotation is diffrent from the original
	{
		int i = 0, wCount = 0, k = 0;
		char* psenCpy = calloc(strlen(pstr) + 1, sizeof(char));
		char* pRotation = calloc(strlen(pstr) + 1, sizeof(char));
		if (psenCpy == NULL || pRotation == NULL)//checks the sucsses of the calloc function
		{
			printf("Memory allocation failed\n");
			exit;
		}
		senCopy(pstr, psenCpy);//copy the original sentence
		while (wCount != m)// copy the first m words to pRotation 
		{
			if (psenCpy[i] == ' ')
			{
				wCount++;
			}
			pRotation[i] = psenCpy[i];
			i++;
		}
		pRotation[i - 1] = '\0';//remove the extra space


		while (psenCpy[i] != '\0')//copy the rest of the sentence as the strat of the original
		{
			pstr[k] = psenCpy[i];
			i++;
			k++;
		}
		i = 0;
		pstr[k] = ' ';//add the space been the rest of the sentence and the part of the rotation
		k++;
		while (pRotation[i] != '\0')// cipt the rotation after the space at the end of the sentece
		{
			pstr[k] = pRotation[i];
			i++;
			k++;
		}
		free(pRotation);//free the unneeded memory
		free(psenCpy);//free the unneeded memory

	}
}
		
	
	


int countWords(char* pstr)//return the number of words in the sentence
{
	int counter=1,i = 0;
	while (pstr[i] != '\0')
	{
		if (pstr[i]==' ')//counts the number of spaces=number of word -1
		{
			counter++;
		}
		i++;
	}
	return counter;

}

void revSent(char* pstr)//function is reversing the word order in the sentence
{
	int i = strlen(pstr)-1; int k = 0; int j =0 ;
	int temp;//remember the index of the space before the word we handle
	char* psenCpy = calloc(strlen(pstr)+1, sizeof(char));
	if (psenCpy == NULL)//checks the sucsses of the calloc function
	{
		printf("Memory allocation failed\n");
		exit;
	}
	senCopy(pstr, psenCpy);
	while (i>= 0) //run inside the array
	{
		while ((char)psenCpy[i]!=' '&&i>=0)//this loop backward on the sentence until a word ends
		{
			i--;
			k++;//counts the length of the word
		}
		temp = i-1;//save the index next word from the end;
		i++;//move the index to first letter of the current word
		while(k>0)// run until the word ends
		{
			pstr[j] = psenCpy[i];//copy the word to the original array but from the start
			k--;//length index
			i++;//current word index
			j++;//original array index
		}
		i = temp;//return i to index of the next word from the end
		if(j!=strlen(pstr))
		pstr[j] =' ';//add space after every word
		j++;//original array index
		
	}
	free(psenCpy);//clear the memory of the copy
}

int checkChars(char* str)//return 0 if string is valid, else return1;
{
	if (str[0] == '\0')//if string is empty
	{
		return 1;
	}
	int i = 0;
	while ((char)str[i] != '\0')//run untul the end of the stirng
	{
		if (!(((char)str[i] >= 'A' && (char)str[i] <= 'Z') || (char)str[i] == ' '))//checks if string have only A-Z chars or spaces
		{
			return 1;

		}
		if (i > 30)//check length
		{
			return 1;
		}
		i++;//COUNTER TO LENGTH OF ARRAY

	}
	return 0;

}

char* removeSpaces(char* pstr)//return a pointer of the string without extra spaces
{
	int i = 0, j = 0, k = 0;
	char* psen = calloc(101,sizeof(char));
	if (psen == NULL)//checks the sucsses of the calloc function
	{
		printf("Memory allocation failed\n");
		exit;
	}
	while (pstr[i] != '\0') //run inside the array
	{
		if ((char)pstr[i] == ' ') //when find a space run inside that section of array with index j
		{
			if (i != 0)
			{
				psen[k] = ' ';// insert one space unless array start with spaces
				k++;// +1 to index of new str array
			}
			j = i + 1;
			while ((char)pstr[j] == ' ')// counts how many spaces in a row 
			{
				j++;

			}

			if (j - i > 1) //checks if series of spaces is larger then 1, true i jumps to the index after series of spaces
			{
				i = j - 1;
			}



		}
		else //enters same value to new str array while value is not space
		{
			psen[k] = pstr[i];
			k++;
		}
		i++;
	}
	char* psenNew = calloc(k+1 , sizeof(char));
	i = 0;
	while (psen[i]!= 0)//copy the array without more then 1 space to new array that match in size to the sentence
	{
		psenNew[i] = psen[i];
	    i+=1;
	}
	free(psen);//free the extra memory from the extra spaces sentence
	psen = psenNew;
	return psen;//returm the new sentece without extra spaces as ap pointer
}


void printSent(char* str, int n) {//second argument was presented in func description but not needed 
	printf("%s", str);
}
void printMenu() //prints the main menu of the program
{
	printf("\n******** Main menu ********\n");
	printf("\n1 : Input the sentence \n2 : Print the sentence\n3 : Reverse the sentence\n4 : Rotate left N\n5 : Rotate right N\n6 : Sort the sentence\n7 : Search the word\n8 : Count number of words\n9 : Display substring M\n10 : Quit\n");
	printf("\n****************************\n");
	printf("\nPlease, enter your choice >");
}

int main() 
{
	char* psec;//used to extract first 2 elements of choice
	char* psec1;//used to extract first element of choice
	char* psec2;//used to extract second element of choice
	char* choice = calloc(100, sizeof(char));
	char c1, c2;
	//int m;//used for rotation
    int wordCount = 0;//used to validate choice 4,5
	char* psen=NULL;char* pstr = calloc(100 ,sizeof(char));

	if (pstr == NULL)
	{
		printf("Memory allocation failed\n");
		exit;
	}
	
	char temp;//used for buffer cleaning
	
	while (strcmp(choice, "10") != 0)
	{
		printMenu();
		//while(fgets(choice,MAX_LEN,stdin)==NULL);
		while(gets(choice) == NULL)
		{
			printf("ERROR: The sentence is empty.\n");
			printMenu();

		}
		if (strcmp(choice, "10") == 0)
		{break;}
		
		psec=spiltChoice(choice);//extract first and second elements 
		psec1 = splitChoiceFir(psec);//extract first element 
		psec2 = splitChoiceSec(psec);//extract second elements 
		if (strcmp(choice, "1") == 0)
		{
			if (psen == NULL)
			{

				psen = pstr;//connect the pointer of the sentence to the malloc memory==sentence not empty
				pstr = NULL;// remove pstr connection to the mallloc
			}
			printf("Please, enter your sentence ");
			gets(psen);
			if (checkChars(psen) == 1)
			{
				printf("\nERROR: Incorrect data, try again.\n");
				pstr = psen;
				psen = NULL;
			}
			else
			{
				printf("%s\n", psen);
				psen = removeSpaces(psen);
				wordCount = countWords(psen);
			}

		}
		else
		{
			if (psen == NULL)
			{
				printf("ERROR: The sentence is empty.\n");
			}
			else
			{
				while (1)
				{
					if (strcmp(choice, "2") == 0)
					{
						printSent(psen, 0);
						break;
					}
					if (strcmp(choice, "3") == 0)
					{
						revSent(psen);
						printSent(psen, 0);
						break;
					}
					if (!strcmp(psec, "6") || !strcmp(psec, "6 A"))
					{
						sortSenA(psen);
						printSent(psen, 0);
						break;

					}
					if(psec2!=NULL)
					{
						if (!strcmp(psec1, "4") && atoi(psec2) <= wordCount && atoi(psec2) != 0)
						{
							rolSent(psen, atoi(psec2));
							printSent(psen, 0);
							break;
						}
						if (!strcmp(psec1, "5") && atoi(psec2) <= wordCount && atoi(psec2) != 0)
						{
							rorSent(psen, atoi(psec2));
							printSent(psen, 0);
							break;
						}

						if (!strcmp(psec, "6 D"))
						{

							sortSenD(psen);
							printSent(psen, 0);
							break;
						}
						if (!strcmp(psec1, "7")&&strlen(choice)==strlen(psec))
						{
							if (searchWord(psen, psec2))
							{
								printf("The word %s is placed in the %d place.", psec2, searchWord(psen, psec2));
							}
							else {
								printf("The word %s is not found",psec2);
							}
							break;
						}
						if (strcmp(psec1,"9") == 0&&atoi(psec2) <= maxWordLength(psen) && atoi(psec2) !=0)
						{
							subSent(psen, atoi(psec2));
							break;
						}
					}
					if (strcmp(choice, "8") == 0)
					{
						printf("The number of words in the sentence is %d.\n", countWords(psen));
						break;
					}
					
					else
					{
						printf("ERROR: Incorrect command, try again.\n");
						break;
					}
				}
			}

		}
	}
	free(choice);
	exit(0);
	return 0;

}
